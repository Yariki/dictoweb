// <auto-generated />
using DictoData.Context;
using DictoInfrasctructure.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DictoData.Migrations
{
    [DbContext(typeof(DictoContext))]
    [Migration("20180926214922_FixWordDeck")]
    partial class FixWordDeck
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DictoData.Model.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("DictoData.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DictoData.Model.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountNew");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastUsedSM2");

                    b.Property<int>("Minute");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DictoData.Model.SuperMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<double>("EF");

                    b.Property<DateTime>("LastRepetition");

                    b.Property<DateTime>("NextRepetition");

                    b.Property<int>("Repetition");

                    b.Property<int>("RepetitionInterval");

                    b.Property<int>("WordId");

                    b.HasKey("Id");

                    b.HasIndex("WordId")
                        .IsUnique();

                    b.ToTable("SuperMemories");
                });

            modelBuilder.Entity("DictoData.Model.Transcription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Original");

                    b.Property<string>("Phonetic");

                    b.HasKey("Id");

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("DictoData.Model.Translate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Text");

                    b.Property<int>("WordId");

                    b.Property<int>("WordType");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Translates");
                });

            modelBuilder.Entity("DictoData.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DictoData.Model.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("DeckId");

                    b.Property<int>("Level");

                    b.Property<string>("Phonetic");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("DictoData.Model.Deck", b =>
                {
                    b.HasOne("DictoData.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DictoData.Model.SuperMemory", b =>
                {
                    b.HasOne("DictoData.Model.Word")
                        .WithOne("SuperMemory")
                        .HasForeignKey("DictoData.Model.SuperMemory", "WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DictoData.Model.Translate", b =>
                {
                    b.HasOne("DictoData.Model.Word", "Word")
                        .WithMany("Translates")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DictoData.Model.User", b =>
                {
                    b.HasOne("DictoData.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DictoData.Model.Word", b =>
                {
                    b.HasOne("DictoData.Model.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId");

                    b.HasOne("DictoData.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
